<template>
	<view>
		<!-- 导航栏 -->
		<free-nav-bar title titleValue="叮咚(99+)" fixed @openPopup="handleOpenPopup" />
	
		<!-- 置顶列表 -->
		<block v-for="(item, index) in list" :key="index">
			<free-media-list v-if="item.isTop" :item="item" :index="index" @click="handleListClick" @long="longPress" />
		</block>

		<!-- 非置顶列表 -->
		<block v-for="(item, index) in list" :key="index">
			<free-media-list v-if="!item.isTop" :item="item" :index="index" @click="handleListClick" @long="longPress" />
		</block>

		<!-- 弹出层 -->
		<free-popup ref="popupRef" :bodyWidth="200" :bodyHeight="getMenusHeight">
			<view class="flex flex-column" style="width: 240rpx;" :style="setMenusStyle">
				<view class="flex-1 flex align-center" hover-class="bg-light" v-for="(item,index) in menus" :key="index" @click="handleMenuItemClick(item.event)">
					<text class="font-md p-3">{{item.name}}</text>
				</view>
			</view>
		</free-popup>
	</view>
</template>

<script>
	import FreeNavBar from '@/components/free-ui/free-nav-bar.vue'
	import FreeMediaList from '@/components/free-ui/free-media-list.vue'
	import FreePopup from '@/components/free-ui/free-popup.vue'
	export default {
		name: "IndexPage",
		components: {
			FreeNavBar,
			FreeMediaList,
			FreePopup
		},
		data() {
			return {
				// 删除聊天对象
				deleteChartObj: {},
				// 置顶列表
				topList: [],
				// 长按的弹出层菜单
				menus: [{
						name: '设为置顶',
						event: "setTop"
					},
					{
						name: '标记未读',
						event: "setNoRead"
					},
					{
						name: '删除该聊天',
						event: "removeChat"
					}
				],
				list: [{
						avatar: "/static/avatar.jpg",
						nickname: '老婆',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆2',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 1,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆3',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 1,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆4',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 1,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					},
					{
						avatar: "/static/avatar.jpg",
						nickname: '老婆5',
						update_time: Date.now(),
						data: '今晚想吃什么都可以...',
						noreadnum: 4,
						isTop: false
					}
				]
			}
		},
		methods: {
			// 监听菜单点击事件
			handleMenuItemClick(event) {
				switch (event) {
					case "setTop":
						this.setTop()
						break
					case "setNoRead":
						console.log("标记未读")
						break
					case "removeChat":
						this.handleDeleteChart()
						break
				}
			},

			// 删除聊天函数
			handleDeleteChart() {
				this.list.splice(this.deleteChartObj.index, 1)
				// 关闭弹出层
				this.$refs.popupRef.hide()
			},

			// 列表长按事件
			longPress({
				x,
				y,
				item,
				index
			}) {
				this.deleteChartObj.item = item
				this.deleteChartObj.index = index
				this.menus[0].name = this.list[this.deleteChartObj.index].isTop ? '取消置顶' : '设为置顶'
				this.$refs.popupRef.show(x, y)
			},
			// 设置或取消置顶函数
			setTop() {
				this.list[this.deleteChartObj.index].isTop = !this.list[this.deleteChartObj.index].isTop
				this.$refs.popupRef.hide()
			},
			
			// 监听列表的点击事件
			handleListClick() {
				console.log("list item click...")
			},
			// 监听弹出层内容点击事件
			handleContentClick() {},
			// 监听弹出层开启事件
			handleOpenPopup() {
				this.$refs.popupRef.show(100, 100)
			}
		},
		computed: {
			// 设置菜单样式的计算属性
			setMenusStyle() {
				return `height: ${this.getMenusHeight}rpx`
			},

			// 动态获取菜单高度
			getMenusHeight() {
				let h = 110
				return this.menus.length * h
			}
		}
	}
</script>

<style lang="less">

</style>
