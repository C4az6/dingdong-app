<template>
	<view>
		<!-- 导航栏 -->
		<free-nav-bar title titleValue="CTO" showBack>
			<free-icon-button slot="right" :iconValue="'\ue6fd'" />
		</free-nav-bar>

		<!-- 聊天内容区域 -->
		<scroll-view scroll-y :show-scrollbar="false" class="position-fixed left-0 right-0 px-3" :style="setBodyBottom" @click="clickPage">
			<!-- 聊天信息列表组件 -->
			<template v-for="(item, index) in list" >
				<free-chat-item 
					ref="chatItemRef" 
					:item="item" 
					:index="index" 
					:pretime="index>0?list[index-1].create_time:0" 
					@long="handleLongPress"
					@previewImage="handlePreviewImage"
				></free-chat-item>
			</template>
		</scroll-view>
		
		<!-- 针对nvue环境下的蒙版层 -->
		<!-- #ifdef APP-NVUE -->
			<div 
				v-if="mode === 'action' || mode === 'emoticon'" 
				class="position-fixed top-0 left-0 right-0 bottom-0" 
				@click="clickPage"
				:style="'bottom:'+maskBottom+'px'"
			></div>
		<!-- #endif -->

		<!-- 底部输入框部分 -->
		<view class="position-fixed left-0 right-0 flex border-top align-center" style="height: 105rpx;background-color: #F7F7F6;" :style="'bottom:'+KeyboardHeight+'px;'">
			<!-- 语音输入 -->
			<free-icon-button slot="right" :iconValue="'\ue606'" />
			<!-- 输入框 -->
			<view class="flex-1">
				<textarea ref="textareaRef" :adjust-position="false" fixed class="bg-white rounded p-2 font-md" style="height: 75rpx;" v-model.trim="text" @focus="mode='text'"/>
			</view>
			<!-- 表情包 -->
			<free-icon-button slot="right" :iconValue="'\ue605'" @click="openActionOrEmoticon('emoticon')" />
			<!-- 拓展菜单按钮 -->
			<free-icon-button v-if="!text.length" slot="right" :iconValue="'\ue603'" @click="openActionOrEmoticon('action')" />
			
			<!-- 发送文字按钮 -->
			<view v-else class="main-bg-color py-1 px-2 rounded mr-2" @click="send('text')">
				<text class="font text-white">发送</text>
			</view>
		</view>
		
		<!-- 长按聊天信息弹出层 -->
		<free-popup ref="popupRef" :bodyWidth="200" :bodyHeight="getMenusHeight" :tabbarHeight="105">
			<view class="flex flex-column" style="width: 240rpx;" :style="setMenusStyle">
				<view class="flex-1 flex align-center" hover-class="bg-light" v-for="(item,index) in setMenusList" :key="index" @click="handleMenuItemClick(item.event)">
					<text class="font-md p-3">{{item.name}}</text>
				</view>
			</view>
		</free-popup>
		
		<!-- 扩展菜单 -->
		<free-popup ref="extendMenuRef" :mask="false" bottom transformOrigin="center bottom" @closePopup="onClosePopup">
			<view style="height: 530rpx" class="border-top border-light-secondary bg-light">
				<swiper :indicator-dots="emoticonOrActionList.length > 1" style="height: 510rpx;">
					<swiper-item v-for="(item, index) in emoticonOrActionList" :key="index" class="row">
						<view 
						class="flex flex-column col-3 justify-center align-center" 
						style="height: 255rpx;"
						v-for="(item2, index2) in item" 
						@click="handleActionClick(item2)"
						:key="index2"
						>
							<image :src="item2.icon" mode="widthFix" style="width: 100rpx;height: 100rpx;"></image>
							<text class="font-sm text-muted mt-2">{{item2.name}}</text>
						</view>
					</swiper-item>
				</swiper>
			</view>
		</free-popup>
		
	</view>
</template>

<script>
// #ifdef APP-NVUE
const dom = weex.requireModule('dom')
// #endif
import FreeNavBar from '@/components/free-ui/free-nav-bar.vue'
import FreeIconButton from '@/components/free-ui/free-icon-button.vue'
import FreeChatItem from '@/components/free-ui/free-chat-item.vue'
import FreePopup from "@/components/free-ui/free-popup.vue"
export default {
  name: 'ChatIndex',
  components: {
		FreeNavBar,
		FreeIconButton,
		FreeChatItem,
		FreePopup
	},
  props: {},
  data () {
    return {
			// 模式：text输入文字，emoticon表情，action操作，audio音频
			mode: "text",
			text: "",		// 用户输入的聊天信息
			KeyboardHeight: 0,		// 键盘高度
			propIndex: -1,		// 当前长按的聊天信息索引
			statusBarHeight: 0,	// 系统状态栏高度
			navBarHeight: 0,		// 导航栏高度
			actionList: [
					[{
						name:"相册",
						icon:"/static/images/extends/pic.png",
						event:"uploadImage"
					},{
						name:"拍摄",
						icon:"/static/images/extends/video.png",
						event:""
					},{
						name:"收藏",
						icon:"/static/images/extends/shoucan.png",
						event:""
					},{
						name:"名片",
						icon:"/static/images/extends/man.png",
						event:""
					},{
						name:"语音通话",
						icon:"/static/images/extends/phone.png",
						event:""
					},{
						name:"位置",
						icon:"/static/images/extends/path.png",
						event:""
					}]
			],
			menus: [{
					name: '复制',
					event: ""
				},
				{
					name: '发送给朋友',
					event: ""
				},
				{
					name: '收藏',
					event: ""
				},
				{
					name: '删除',
					event: ""
				},
				{
					name: '多选',
					event: ""
				},
				{
					name: '撤回',
					event: "removeChatItem"
				}
			],
			list: [
				{
					avatar: "/static/images/demo/demo6.jpg",
					user_id: 2,
					nickname: "寻找阿诺泰的猪",
					type: "text",	// image、audio、video
					data: '你还是放弃吧。',
					create_time: 1615533541,
					isRemove: true
				},
				{
					avatar: "/static/images/demo/demo5.jpg",
					user_id: 1,
					nickname: "Alexander",
					type: "text",	// image、audio、video
					data: '做人就要坚持，做人不坚持不如做狗!',
					create_time: 161554034,
					isRemove: false
				},
				{
					avatar: "/static/images/demo/demo6.jpg",
					user_id: 2,
					nickname: "寻找阿诺泰的猪",
					type: "text",	// image、audio、video
					data: '你还是放弃吧。',
					create_time: 1615580357,
					isRemove: true
				},
				{
					avatar: "/static/images/demo/demo5.jpg",
					user_id: 1,
					nickname: "Alexander",
					type: "text",	// image、audio、video
					data: '做人就要坚持，做人不坚持不如做狗!',
					create_time: 1615581234,
					isRemove: false
				},
				{
					avatar: "/static/images/demo/demo6.jpg",
					user_id: 2,
					nickname: "寻找阿诺泰的猪",
					type: "text",	// image、audio、video
					data: '你还是放弃吧。',
					create_time: 1616444341,
					isRemove: false
				},
				{
					avatar: "/static/images/demo/demo5.jpg",
					user_id: 1,
					nickname: "Alexander",
					type: "audio",	// image、audio、video
					data: '/static/audio/01.mp3',
					create_time: 1616444341,
					isRemove: false
				},
				{
					avatar: "/static/images/demo/demo6.jpg",
					user_id: 2,
					nickname: "寻找阿诺泰的猪",
					type: "audio",	// image、audio、video
					data: '/static/audio/02.mp3',
					create_time: 1616444341,
					isRemove: false
				},
				{
					avatar: "/static/images/demo/demo5.jpg",
					user_id: 1,
					nickname: "Alexander",
					type: "audio",	// image、audio、video
					data: '/static/audio/03.mp3',
					create_time: 1616444941,
					isRemove: false
				}
			],
			emoticonList: []
		}
  },
  computed: {
		// 计算预览图片的列表
		previewImageList() {
			let arrList = []
			this.list.forEach(item => {
				if(item.type === 'emoticon' || item.type === 'image') {
					arrList.push(item.data)
				}
			})
			return arrList
		},
		
		// 获取拓展菜单操作列表或者表情列表
		emoticonOrActionList() {
			return (this.mode === 'emoticon' || this.mode === 'action') ? this[this.mode + 'List']: []
		},
		
		// 计算蒙版距离底部的位置
		maskBottom() {
			return this.KeyboardHeight + uni.upx2px(105)
		},
		
		// 设置内容区域高度
		setBodyBottom () {
			return `bottom: ${this.KeyboardHeight + uni.upx2px(105)}px;top: ${this.navBarHeight}px;`
		},
		
		// 设置菜单样式的计算属性
		setMenusStyle() {
			return `height: ${this.getMenusHeight}rpx`
		},
		
		// 动态获取菜单高度,用于边界处理
		getMenusHeight() {
			let h = 100			
			return this.menus.length * h
		},
		
		// 动态设置菜单项
		setMenusList() {
			return this.menus.filter(v=>{
				if(v.name === '撤回' && !this.isdoSelf) {
					// 该项聊天信息不是本人ID就进行隐藏操作
					return false
				}
				return true
			})
		},
		
		isdoSelf() {
			// 获取本人id （假设拿到了）
			let id = 1
			let user_id = this.propIndex > -1 ? this.list[this.propIndex].user_id : 0
			return user_id === id
		}
	},
  watch: {
		mode: {
			handler(newVal, oldVal) {
				// mode模式不为操作菜单并且不为表情包的时候关闭拓展菜单弹出层
				(newVal !== 'action' && newVal !== 'emoticon') && this.$refs.extendMenuRef.hide()
				newVal !== 'text' && uni.hideKeyboard()
			}
		}
	},
  created () {
		this.__init()
	},
	mounted() {
		// 监听键盘高度的动态变化
		uni.onKeyboardHeightChange(res => {
			if(this.mode !== 'action' && this.mode !== 'emoticon') {
				// 不为操作拓展菜单模式并且不为表情包模式的时候才动态赋值键盘高度
				this.KeyboardHeight = res.height
			}
			if(res.height>0) {
				this.$nextTick(_=>{
					this.setPageToBottom()
				})
			}
		})
		
		// NVUE环境下获取系统状态栏的高度
		// #ifdef APP-NVUE
		this.statusBarHeight = plus.navigator.getStatusbarHeight()
		// #endif
		this.navBarHeight = this.statusBarHeight + uni.upx2px(90)
	},
  methods: {
		// 监听图片预览
		handlePreviewImage(e) {
			uni.previewImage({
				current:e.data,
				urls: this.previewImageList,
				indicator: 'default'
			})
		},
		
		// 初始化表情包数据列表函数
		__init() {
			// 一共有20张表情包，因此total = 20
			var total = 20
			// 每个swiper-item里面有8张表情包，page为计算出来的总页数,此处为3
			var page = Math.ceil(total / 8)
			var arr = []
			for (var i = 0; i < page; i++) {
				var start = i * 8
				arr[i] = []
				for (var j = 0; j < 8; j++) {
					var no = start + j
					if ((no+1) > total) {
						break;
					}
					arr[i].push({
						name: '表情' + no,
						icon: `/static/images/emoticon/5497/${no}.gif`,
						event: 'sendEmoticon'
					})
				}
			}
			this.emoticonList = arr
		},
		
		// 点击页面
		clickPage() {
			this.mode = ''
		},
		
		// 关闭底部拓展菜单
		onClosePopup() {
			this.KeyboardHeight = 0
		},
		
		// 监听拓展菜单点击事件
		handleActionClick(e) {
			switch(e.event) {
				case 'uploadImage':	// 上传图片
					uni.chooseImage({		// 选择相册
						count: 9,
						success: res => {
							console.log("uploadImage res: ", res)
							res.tempFilePaths.forEach(item=>{
								this.send('image', item)
							})
						}
					})
					break;
				case 'sendEmoticon':	// 发送表情包
				this.send('emoticon', e.icon)
			}
		},
		
		// 底部拓展菜单展示
		openActionOrEmoticon(mode='action') {
			console.log("mode: ", mode)
			this.mode = mode,  // 修改模式为操作拓展菜单的模式
			// 显示拓展菜单
			this.$refs.textareaRef.blur()
			this.$refs.extendMenuRef.show()
			// 收起键盘,此时键盘高度为0,但是不会马上就更新到模版中
			uni.hideKeyboard()
			this.KeyboardHeight = uni.upx2px(530)
		},
		
		// 发送聊天信息
		send(type, data = '') {
			let chatObj = {
				avatar: "/static/images/demo/demo5.jpg",
				user_id: 1,
				nickname: "伤心的瘦子",
				type: type,	// image、audio、video、emoticon
				data: "",
				create_time: Date.now(),
				isRemove: false
			}
			switch(type) {
				case 'text':
					chatObj.data = this.text
					this.text = ''
					break;
				default:
					chatObj.data = data
					break;
			}
			this.list.push(chatObj)
			this.$nextTick(_=>{
				this.setPageToBottom()
			})
		},
		
		//　回到底部
		setPageToBottom() {
			let chatItem = this.$refs.chatItemRef
			let lastIndex = chatItem.length > 0 ? chatItem.length -1 : 0
			if(chatItem[lastIndex]) {
				dom.scrollToElement(chatItem[lastIndex], {})
			}
		},
		
		// 监听聊天信息弹出菜单点击事件
		handleMenuItemClick(e) {
			switch(e) {
				case 'removeChatItem':  // 撤回消息事件
					// 拿到当前操作的信息对象
					if(this.propIndex > -1) {
						this.list[this.propIndex].isRemove = true
					}
					break;
				default:
					break;
			}
			// 关闭弹出菜单
			this.$refs.popupRef.hide()
		},
		
		// 监听聊天信息的长按事件
		handleLongPress({x,y,index}) {
			this.propIndex = index
			this.$refs.popupRef.show(x, y)
		}
	}
}
</script>

<style scoped lang="less">

</style>
